"""
The sequence of triangle numbers is generated by adding the natural 
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 
28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
  3: 1,3
   6: 1,2,3,6
   10: 1,2,5,10
   15: 1,3,5,15
   21: 1,3,7,21
   28: 1,2,4,7,14,28
   We can see that 28 is the first triangle number to have over five 
   divisors.
   
   What is the value of the first triangle number to have over five 
   hundred divisors?

"""
import math

theSum = 0

numOfDivisors = 1

def generateTriangleNumbers():
	global theSum

	#generate the triangle numbers in the range of 1 to n and append each 
	#triangle number to theList
	#use a generator to speed things up
	for i in range(1,15000):
		theSum = i + theSum
		#theList.append(theSum)
		yield (theSum)


def triangleNumbers():
	global numOfDivisors
	tempReturn = generateTriangleNumbers()

	#for each triangleNumber(num) check if it is divisible by any number up to its
	#square. If it is, add 2 to the count of numberOfDivisors (we add 2 because
	#of symmetry)
	for num in tempReturn:
		for j in range(1, int(math.sqrt(num))):
			#print num, numOfDivisors
			if(num % j == 0):
				numOfDivisors = numOfDivisors + 2
				if(numOfDivisors > 500):
					#print numOfDivisors, num
					return num
		
		#we went through all the numbers from 1 to sqrt(n), so reset the 
		#numOfDivisors back to 1
		numOfDivisors = 1

print triangleNumbers()
