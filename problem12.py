"""
The sequence of triangle numbers is generated by adding the natural 
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 
28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
  3: 1,3
   6: 1,2,3,6
   10: 1,2,5,10
   15: 1,3,5,15
   21: 1,3,7,21
   28: 1,2,4,7,14,28
   We can see that 28 is the first triangle number to have over five 
   divisors.
   
   What is the value of the first triangle number to have over five 
   hundred divisors?

"""
import math
theList = []
theSum = 0
count = 0

def generateTriangleNumbers():
	global theSum
	
	#generate the triangle numbers in the range of 1 to n and append each 
	#triangle number to theList
	for i in range(1,5000):
		theSum = i + theSum
		theList.append(theSum)
		
		


def triangleNumbers():
	global count
	for i in range(0, len(theList)):
		print "i is " + str(theList[i])
		for j in range(1, int(math.sqrt(sum(theList)))):
			if(theList[i] % j == 0):
				count = count + 1
				if(count > 450):
					print theList
					return theList[i]
				#print "count for ", i , "is ", count
		count = 0
		
generateTriangleNumbers()
print triangleNumbers()
